// ncap2 script for applying landmask after doing the regridding
//
// This first turns the landmask into 0/1 values, then applies this
// landmask to the other data variables. It then sets the landmask to
// be _FillValue wherever we had no data in the original source data
// (or more exactly, where has_data <= 0.5) (this is needed in order
// to know what points should be used from the Bamber-derived data
// when overwriting global data fields).
//
// The assumptions here are: 
// (1) before regridding, the landmask told
// us exactly where the data fields had valid (non-missing) values;
// (2) the data variables were pre-filled (extrapolated) before they
// were regridded, and then were regridded WITHOUT source masking; 
// (3) the landmask was regridded using the same algorithm as the other data variables,
// using a value of 0 wherever the landmask had a missing value. 
//
// Under these assumptions, the regridded landmask field basically tells us the
// fraction of each destination point that came from a valid
// (non-extrapolated) source point -- or at least something similar to
// that. Thus, by choosing a threshold for where we set landmask to 0
// vs 1, we are choosing the required fraction of source area that
// must have been valid (non-extrapolated) for a destination cell to
// be considered valid.

landmask[$lat,$lon]=0b;
landmask.set_miss(-1b);

// The following line is where we set the threshold for valid
// points. There is nothing magical about 0.5, but it seems to make
// sense intuitively.
where(landmask_float > 0.5)
  landmask=1;

where(landmask==0) {
  // For some reason the get_miss() function doesn't work correctly
  // for these variables -- e.g., pct_gic=pct_gic.get_miss()
  // Thus I am forced to hard-code the missing value.
  pct_gic=-9999.f;
  pct_icesheet=-9999.f;
  usrf=-9999.f;
}

// The fill value pattern of landmask will later be used to tell us
// where to overwrite global data with the Bamber-derived data (only
// overwrite where landmask is not _FillValue). I first tried to
// do this where(landmask_float==-9999.f), but with the way landmask
// is regridded, that led to a slight encroachment of valid values --
// this wasn't a huge problem, but gave slightly wrong results in a
// corner of Ellesmere island. So now I am instead using this new
// has_data variable to set this fill pattern.
//
// I'm not sure that we need the 'landmask==0' part of the
// conditional, but I don't think it hurts anything to keep it in
// there, and I think it could mess things up to set landmask to
// _FillValue where it used to be 1 (at least, it would require going
// back through the data variables and setting them to _FillValue in
// those places, too).
where(landmask==0 && has_data <= 0.5)
  landmask = landmask.get_miss();

